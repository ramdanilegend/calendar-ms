name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: calendar_ms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "TEST_DB_HOST=localhost" >> .env.test
          echo "TEST_DB_PORT=5432" >> .env.test
          echo "TEST_DB_NAME=calendar_ms_test" >> .env.test
          echo "TEST_DB_USER=test_user" >> .env.test
          echo "TEST_DB_PASSWORD=test_password" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: npm run migrate
        env:
          NODE_ENV: test

      - name: Run lint
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Run tests
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run dependency scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'results.sarif'
        continue-on-error: true

  build:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: calendar-ms:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start test services
          docker run -d --name test-postgres \
            -e POSTGRES_PASSWORD=test_password \
            -e POSTGRES_USER=test_user \
            -e POSTGRES_DB=calendar_ms_test \
            -p 5432:5432 \
            postgres:15

          # Wait for postgres to be ready
          sleep 10

          # Run the application container
          docker run -d --name calendar-ms-test \
            --link test-postgres:postgres \
            -e DB_HOST=postgres \
            -e DB_PORT=5432 \
            -e DB_NAME=calendar_ms_test \
            -e DB_USER=test_user \
            -e DB_PASSWORD=test_password \
            -e JWT_SECRET=test-secret \
            -e NODE_ENV=test \
            -p 3000:3000 \
            calendar-ms:test

          # Wait for app to start
          sleep 15

          # Test health endpoint
          curl -f http://localhost:3000/api/v1/health || exit 1

          # Cleanup
          docker stop calendar-ms-test test-postgres
          docker rm calendar-ms-test test-postgres

  vulnerability-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: calendar-ms:scan
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'calendar-ms:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
